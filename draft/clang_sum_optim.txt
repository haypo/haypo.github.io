$ cat plop.c 
int __attribute__((noinline)) sum(int n)
{
    int s = 0;
    for (int i=1; i<=n; i++) {
        s += i;
    }
    return s;
}

int main(int argc, char **argv)
{
    return sum(argc - 1);
}

$ clang -g plop.c -O3 -o plop
$ ./plop a a a a a a; echo $? # argc=6
21

$ python3 -c 'n=6; print(sum(i for i in range(1, n+1)))'
21

$ gdb ./plop
(gdb) disassemble sum
Dump of assembler code for function sum:
   # rdi = n
   0x0000000000401110 <+0>:	test   edi,edi
   # special case: sum(0)=0
   0x0000000000401112 <+2>:	jle    0x401128 <sum+24>

   # eax = n - 1
   0x0000000000401114 <+4>:	lea    eax,[rdi-0x1]
   # ecx = n - 2
   0x0000000000401117 <+7>:	lea    ecx,[rdi-0x2]
   # rcx = rax * rcx
   #     = (n - 1) * (n - 2)
   0x000000000040111a <+10>:	imul   rcx,rax
   # rcx = rcx / 2
   #     = (n - 1) * (n - 2) / 2
   0x000000000040111e <+14>:	shr    rcx,1
   # eax = rcx + rdi * 2
   #     = (n - 1) * (n - 2) / 2 + 2n
   0x0000000000401121 <+17>:	lea    eax,[rcx+rdi*2]
   # eax = eax + (-1)
   #     = eax - 1
   #     = (n - 1) * (n - 2) / 2 + 2n - 1
   #     = (n - 1) * (n - 2) / 2 + (4n - 2) / 2
   #     = ((n - 1) * (n - 2) + 4n - 2) / 2
   #     = (n*n -2n -n +2 + 4n - 2) / 2
   #     = (n*n + n) / 2
   #     = n * (n + 1) / 2
   0x0000000000401124 <+20>:	add    eax,0xffffffff
   0x0000000000401127 <+23>:	ret    

   # special case: sum(0)=0
   0x0000000000401128 <+24>:	xor    eax,eax
   0x000000000040112a <+26>:	ret

